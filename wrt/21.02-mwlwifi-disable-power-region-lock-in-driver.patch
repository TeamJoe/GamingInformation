From ddcbc0c1050ccb4edd27de9ca9c50edc1309eb7c Mon Sep 17 00:00:00 2001
From: user <user@computer>
Date: Fri, 17 Sep 2021 16:16:00 +0200
Subject: [PATCH] mwlwifi: disable power/region lock in driver

This patch does two things:
1. Forward the driver's revision to the latest one at the time of this patch
   Latest revision already includes a patch to fix compilation with kernel
   5.3 or newer, so use this instead of the patch.
2. Don't enforce the region and power table from EEPROM for MWL8964
   This doesn't actually allow you to override the EEPROM settings! It just
   ignores mismatches between EEPROM and OpenWRT setting and thus prevents
   the driver from refusing to load on mismatch. In addition, it allows DFS
   channels to be used on non-US versions of WRT32X and WRT3200ACM, which are
   otherwise blocked.
---
 package/kernel/mwlwifi/Makefile               |   6 +-
 ...compile-with-mac80211-backports-5_3+.patch |  35 ---
 ...1-remove-region-and-power-table-lock.patch | 209 ++++++++++++++++++
 3 files changed, 212 insertions(+), 38 deletions(-)
 delete mode 100644 package/kernel/mwlwifi/patches/001-Fix-compile-with-mac80211-backports-5_3+.patch
 create mode 100644 package/kernel/mwlwifi/patches/001-remove-region-and-power-table-lock.patch

diff --git a/package/kernel/mwlwifi/Makefile b/package/kernel/mwlwifi/Makefile
index eb986dca03..16d8908b46 100644
--- a/package/kernel/mwlwifi/Makefile
+++ b/package/kernel/mwlwifi/Makefile
@@ -15,9 +15,9 @@ PKG_LICENSE_FILES:=
 
 PKG_SOURCE_URL:=https://github.com/kaloz/mwlwifi
 PKG_SOURCE_PROTO:=git
-PKG_SOURCE_DATE:=2020-02-06
-PKG_SOURCE_VERSION:=a2fd00bb74c35820dfe233d762690c0433a87ef5
-PKG_MIRROR_HASH:=0eda0e774a87e58e611d6436350e1cf2be3de50fddde334909a07a15b0c9862b
+PKG_SOURCE_DATE:=2020-04-16
+PKG_SOURCE_VERSION:=111118dc2ea3b592a5f7dff18c82d57a651970e7
+PKG_MIRROR_HASH:=dea6eeb2200ebe52a8f5db5a188b85fb6e57b68fec5f6d3437375e63bf77741b
 
 PKG_MAINTAINER:=Imre Kaloz <kaloz@openwrt.org>
 PKG_BUILD_PARALLEL:=1
diff --git a/package/kernel/mwlwifi/patches/001-Fix-compile-with-mac80211-backports-5_3+.patch b/package/kernel/mwlwifi/patches/001-Fix-compile-with-mac80211-backports-5_3+.patch
deleted file mode 100644
index fdba575f04..0000000000
--- a/package/kernel/mwlwifi/patches/001-Fix-compile-with-mac80211-backports-5_3+.patch
+++ /dev/null
@@ -1,35 +0,0 @@
-From 182391a3c96ff6ad79bbba0758338a16a66abbd8 Mon Sep 17 00:00:00 2001
-From: DENG Qingfang <dengqf6@mail2.sysu.edu.cn>
-Date: Wed, 12 Feb 2020 14:18:58 +0800
-Subject: [PATCH] Fix driver loading with backports 5.3+
-
-Commit 747796b2f126 did not solve the issue that it crashes when an older kernel
-with a newer backport tries loading it, because it only detects kernel version.
-
-As net/cfg80211.h in 5.3+ defines VENDOR_CMD_RAW_DATA, use it as a condition.
-
-Signed-off-by: DENG Qingfang <dqfext@gmail.com>
----
- vendor_cmd.c | 4 ++--
- 1 file changed, 2 insertions(+), 2 deletions(-)
-
---- a/vendor_cmd.c
-+++ b/vendor_cmd.c
-@@ -92,7 +92,7 @@ static const struct wiphy_vendor_command
- 			  .subcmd = MWL_VENDOR_CMD_SET_BF_TYPE},
- 		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
- 		.doit = mwl_vendor_cmd_set_bf_type,
--#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,3,0))
-+#ifdef VENDOR_CMD_RAW_DATA
- 		.policy = mwl_vendor_attr_policy,
- #endif
- 	},
-@@ -101,7 +101,7 @@ static const struct wiphy_vendor_command
- 			  .subcmd = MWL_VENDOR_CMD_GET_BF_TYPE},
- 		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
- 		.doit = mwl_vendor_cmd_get_bf_type,
--#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,3,0))
-+#ifdef VENDOR_CMD_RAW_DATA
- 		.policy = mwl_vendor_attr_policy,
- #endif
- 	}
diff --git a/package/kernel/mwlwifi/patches/001-remove-region-and-power-table-lock.patch b/package/kernel/mwlwifi/patches/001-remove-region-and-power-table-lock.patch
new file mode 100644
index 0000000000..f25b8300d8
--- /dev/null
+++ b/package/kernel/mwlwifi/patches/001-remove-region-and-power-table-lock.patch
@@ -0,0 +1,209 @@
+Remove locked region and power table for WRT3200ACM and WRT32X
+
+--- a/core.c
++++ b/core.c
+@@ -385,13 +385,6 @@ static void mwl_regd_init(struct mwl_priv *priv)
+ 	/* hook regulatory domain change notification */
+ 	priv->hw->wiphy->reg_notifier = mwl_reg_notifier;
+ 
+-	if (priv->chip_type == MWL8964)
+-		rc = mwl_fwcmd_get_pwr_tbl_sc4(priv->hw,
+-					       &priv->device_pwr_tbl[0],
+-					       &region_code,
+-					       &priv->number_of_channels,
+-					       0);
+-	else
+ 		rc = mwl_fwcmd_get_device_pwr_tbl(priv->hw,
+ 						  &priv->device_pwr_tbl[0],
+ 						  &region_code,
+@@ -403,13 +396,6 @@ static void mwl_regd_init(struct mwl_priv *priv)
+ 	priv->forbidden_setting = true;
+ 
+ 	for (i = 1; i < priv->number_of_channels; i++) {
+-		if (priv->chip_type == MWL8964)
+-			mwl_fwcmd_get_pwr_tbl_sc4(priv->hw,
+-						  &priv->device_pwr_tbl[i],
+-						  &region_code,
+-						  &priv->number_of_channels,
+-						  i);
+-		else
+ 			mwl_fwcmd_get_device_pwr_tbl(priv->hw,
+ 						     &priv->device_pwr_tbl[i],
+ 						     &region_code,
+@@ -858,10 +844,6 @@ static int mwl_wl_init(struct mwl_priv *priv)
+ 		mwl_fwcmd_get_txpwrlmt_cfg_data(hw);
+ 	}
+ 
+-	if (priv->chip_type == MWL8964)
+-		rc = mwl_fwcmd_get_fw_region_code_sc4(hw,
+-						      &priv->fw_region_code);
+-	else
+ 		rc = mwl_fwcmd_get_fw_region_code(hw, &priv->fw_region_code);
+ 	if (!rc) {
+ 		priv->fw_device_pwrtbl = true;
+--- a/hif/fwcmd.c
++++ b/hif/fwcmd.c
+@@ -94,8 +94,6 @@ char *mwl_fwcmd_get_cmd_string(unsigned short cmd)
+ 		{ HOSTCMD_CMD_GET_DEVICE_PWR_TBL, "GetDevicePwrTbl" },
+ 		{ HOSTCMD_CMD_SET_RATE_DROP, "SetRateDrop" },
+ 		{ HOSTCMD_CMD_NEWDP_DMATHREAD_START, "NewdpDMAThreadStart" },
+-		{ HOSTCMD_CMD_GET_FW_REGION_CODE_SC4, "GetFwRegionCodeSC4" },
+-		{ HOSTCMD_CMD_GET_DEVICE_PWR_TBL_SC4, "GetDevicePwrTblSC4" },
+ 		{ HOSTCMD_CMD_QUIET_MODE, "QuietMode" },
+ 		{ HOSTCMD_CMD_CORE_DUMP_DIAG_MODE, "CoreDumpDiagMode" },
+ 		{ HOSTCMD_CMD_802_11_SLOT_TIME, "80211SlotTime" },
+@@ -3431,83 +3429,7 @@ int mwl_fwcmd_newdp_dmathread_start(struct ieee80211_hw *hw)
+ }
+ 
+ 
+-int mwl_fwcmd_get_fw_region_code_sc4(struct ieee80211_hw *hw,
+-				     u32 *fw_region_code)
+-{
+-	struct mwl_priv *priv = hw->priv;
+-	struct hostcmd_cmd_get_fw_region_code_sc4 *pcmd;
+-	u16 cmd;
+-
+-	pcmd = (struct hostcmd_cmd_get_fw_region_code_sc4 *)&priv->pcmd_buf[0];
+-
+-	mutex_lock(&priv->fwcmd_mutex);
+-
+-	memset(pcmd, 0x00, sizeof(*pcmd));
+-	cmd = HOSTCMD_CMD_GET_FW_REGION_CODE_SC4;
+-	pcmd->cmd_hdr.cmd = cpu_to_le16(cmd);
+-	pcmd->cmd_hdr.len = cpu_to_le16(sizeof(*pcmd));
+-
+-	if (mwl_hif_exec_cmd(hw, cmd)) {
+-		mutex_unlock(&priv->fwcmd_mutex);
+-		return -EIO;
+-	}
+-
+-	if (pcmd->cmd_hdr.result != 0) {
+-		mutex_unlock(&priv->fwcmd_mutex);
+-		return -EINVAL;
+-	}
+-
+-	if (pcmd->status)
+-		*fw_region_code = (pcmd->status == 1) ? 0 : pcmd->status;
+-	else
+-		*fw_region_code = le32_to_cpu(pcmd->fw_region_code);
+-
+-	mutex_unlock(&priv->fwcmd_mutex);
+-
+-	return 0;
+-}
+-
+-int mwl_fwcmd_get_pwr_tbl_sc4(struct ieee80211_hw *hw,
+-			      struct mwl_device_pwr_tbl *device_ch_pwrtbl,
+-			      u8 *region_code,
+-			      u8 *number_of_channels,
+-			      u32 channel_index)
+-{
+-	struct mwl_priv *priv = hw->priv;
+-	struct hostcmd_cmd_get_device_pwr_tbl_sc4 *pcmd;
+-	int status;
+-	u16 cmd;
+-
+-	pcmd = (struct hostcmd_cmd_get_device_pwr_tbl_sc4 *)&priv->pcmd_buf[0];
+-
+-	mutex_lock(&priv->fwcmd_mutex);
+-
+-	memset(pcmd, 0x00, sizeof(*pcmd));
+-	cmd = HOSTCMD_CMD_GET_DEVICE_PWR_TBL_SC4;
+-	pcmd->cmd_hdr.cmd = cpu_to_le16(cmd);
+-	pcmd->cmd_hdr.len = cpu_to_le16(sizeof(*pcmd));
+-	pcmd->status = cpu_to_le16(cmd);
+-	pcmd->current_channel_index = cpu_to_le32(channel_index);
+-
+-	if (mwl_hif_exec_cmd(hw, cmd)) {
+-		mutex_unlock(&priv->fwcmd_mutex);
+-		return -EIO;
+-	}
+ 
+-	device_ch_pwrtbl->channel = pcmd->channel_pwr_tbl.channel;
+-	memcpy(device_ch_pwrtbl->tx_pwr, pcmd->channel_pwr_tbl.tx_pwr,
+-	       SYSADPT_TX_PWR_LEVEL_TOTAL_SC4);
+-	device_ch_pwrtbl->dfs_capable = pcmd->channel_pwr_tbl.dfs_capable;
+-	device_ch_pwrtbl->ax_ant = pcmd->channel_pwr_tbl.ax_ant;
+-	device_ch_pwrtbl->cdd = pcmd->channel_pwr_tbl.cdd;
+-	*region_code = pcmd->region_code;
+-	*number_of_channels = pcmd->number_of_channels;
+-	status = le16_to_cpu(pcmd->status);
+-
+-	mutex_unlock(&priv->fwcmd_mutex);
+-
+-	return status;
+-}
+ 
+ int mwl_fwcmd_quiet_mode(struct ieee80211_hw *hw, bool enable, u32 period,
+ 			 u32 duration, u32 next_offset)
+--- a/hif/fwcmd.h
++++ b/hif/fwcmd.h
+@@ -253,15 +253,6 @@ int mwl_fwcmd_set_rate_drop(struct ieee80211_hw *hw, int enable,
+ 
+ int mwl_fwcmd_newdp_dmathread_start(struct ieee80211_hw *hw);
+ 
+-int mwl_fwcmd_get_fw_region_code_sc4(struct ieee80211_hw *hw,
+-				     u32 *fw_region_code);
+-
+-int mwl_fwcmd_get_pwr_tbl_sc4(struct ieee80211_hw *hw,
+-			      struct mwl_device_pwr_tbl *device_ch_pwrtbl,
+-			      u8 *region_code,
+-			      u8 *number_of_channels,
+-			      u32 channel_index);
+-
+ int mwl_fwcmd_quiet_mode(struct ieee80211_hw *hw, bool enable, u32 period,
+ 			 u32 duration, u32 next_offset);
+ 
+--- a/hif/hostcmd.h
++++ b/hif/hostcmd.h
+@@ -73,8 +73,6 @@
+ #define HOSTCMD_CMD_GET_DEVICE_PWR_TBL          0x116B
+ #define HOSTCMD_CMD_SET_RATE_DROP               0x1172
+ #define HOSTCMD_CMD_NEWDP_DMATHREAD_START       0x1189
+-#define HOSTCMD_CMD_GET_FW_REGION_CODE_SC4      0x118A
+-#define HOSTCMD_CMD_GET_DEVICE_PWR_TBL_SC4      0x118B
+ #define HOSTCMD_CMD_QUIET_MODE                  0x1201
+ #define HOSTCMD_CMD_CORE_DUMP_DIAG_MODE         0x1202
+ #define HOSTCMD_CMD_802_11_SLOT_TIME            0x1203
+@@ -1110,41 +1108,6 @@ struct hostcmd_cmd_newdp_dmathread_start {
+ 	struct hostcmd_header cmd_hdr;
+ } __packed;
+ 
+-/* HOSTCMD_CMD_GET_FW_REGION_CODE_SC4 */
+-struct hostcmd_cmd_get_fw_region_code_sc4 {
+-	struct hostcmd_header cmd_hdr;
+-	__le32 status; /* 0 = Found, 1 = Error */
+-	__le32 fw_region_code;
+-} __packed;
+-
+-/* HOSTCMD_CMD_GET_DEVICE_PWR_TBL_SC4 */
+-#define HAL_TRPC_ID_MAX_SC4        32
+-#define MAX_GROUP_PER_CHANNEL_5G   39
+-#define MAX_GROUP_PER_CHANNEL_2G   21
+-#define	MAX(a, b) (((a) > (b)) ? (a) : (b))
+-#define MAX_GROUP_PER_CHANNEL_RATE \
+-	MAX(MAX_GROUP_PER_CHANNEL_5G, MAX_GROUP_PER_CHANNEL_2G)
+-
+-struct channel_power_tbl_sc4 {
+-	u8 channel;
+-	u8 grp_pwr[MAX_GROUP_PER_CHANNEL_RATE];
+-	u8 tx_pwr[HAL_TRPC_ID_MAX_SC4];
+-	u8 dfs_capable;
+-	u8 ax_ant;
+-	u8 cdd;
+-	u8 rsvd;
+-} __packed;
+-
+-struct hostcmd_cmd_get_device_pwr_tbl_sc4 {
+-	struct hostcmd_header cmd_hdr;
+-	__le16 status; /* 0 = Found, 1 = Error */
+-	u8 region_code;
+-	u8 number_of_channels;
+-	__le32 current_channel_index;
+-	/* Only for 1 channel, so, 1 channel at a time */
+-	struct channel_power_tbl_sc4 channel_pwr_tbl;
+-} __packed;
+-
+ /* HOSTCMD_CMD_QUIET_MODE */
+ struct hostcmd_cmd_quiet_mode {
+ 	struct hostcmd_header cmd_hdr;
-- 
2.30.2

